/// <reference types="node" />
import { Readable } from 'stream';
/**
 * The different types of stream that can exist within the pipeline
 *
 * @remarks
 * - `Arbitrary` - the type of the stream at this point is unknown.
 *
 * - `Raw` - the stream at this point is s16le PCM.
 *
 * - `OggOpus` - the stream at this point is Opus audio encoded in an Ogg wrapper.
 *
 * - `WebmOpus` - the stream at this point is Opus audio encoded in a WebM wrapper.
 *
 * - `Opus` - the stream at this point is Opus audio, and the stream is in object-mode. This is ready to play.
 */
export declare enum StreamType {
    Arbitrary = "arbitrary",
    Raw = "raw",
    OggOpus = "ogg/opus",
    WebmOpus = "webm/opus",
    Opus = "opus"
}
/**
 * The different types of transformers that can exist within the pipeline
 */
export declare enum TransformerType {
    FFmpegPCM = "ffmpeg pcm",
    FFmpegOgg = "ffmpeg ogg",
    OpusEncoder = "opus encoder",
    OpusDecoder = "opus decoder",
    OggOpusDemuxer = "ogg/opus demuxer",
    WebmOpusDemuxer = "webm/opus demuxer",
    InlineVolume = "volume transformer"
}
/**
 * Represents a pathway from one stream type to another using a transformer
 */
export interface Edge {
    from: Node;
    to: Node;
    cost: number;
    transformer: (input: string | Readable) => Readable;
    type: TransformerType;
}
/**
 * Represents a type of stream within the graph, e.g. an Opus stream, or a stream of raw audio.
 */
export declare class Node {
    /**
     * The outbound edges from this node
     */
    readonly edges: Edge[];
    /**
     * The type of stream for this node
     */
    readonly type: StreamType;
    constructor(type: StreamType);
    /**
     * Creates an outbound edge from this node
     *
     * @param edge - The edge to create
     */
    addEdge(edge: Omit<Edge, 'from'>): void;
}
/**
 * Gets a node from its stream type
 *
 * @param type - The stream type of the target node
 */
export declare function getNode(type: StreamType): Node;
/**
 * Finds the lowest-cost pipeline to convert the input stream type into an Opus stream
 *
 * @param from - The stream type to start from
 * @param constraint - Extra constraints that may be imposed on potential solution
 */
export declare function findPipeline(from: StreamType, constraint: (path: Edge[]) => boolean): Edge[];
//# sourceMappingURL=TransformerGraph.d.ts.map