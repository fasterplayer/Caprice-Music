/// <reference types="node" />
import { TypedEmitter } from 'tiny-typed-emitter';
import { Awaited } from '../util/util';
/**
 * Stores an IP address and port. Used to store socket details for the local client as well as
 * for Discord.
 */
export interface SocketConfig {
    ip: string;
    port: number;
}
export interface VoiceUDPSocketEvents {
    error: (error: Error) => Awaited<void>;
    close: () => Awaited<void>;
    debug: (message: string) => Awaited<void>;
    message: (message: Buffer) => Awaited<void>;
}
/**
 * Manages the UDP networking for a voice connection.
 */
export declare class VoiceUDPSocket extends TypedEmitter<VoiceUDPSocketEvents> {
    /**
     * The underlying network Socket for the VoiceUDPSocket.
     */
    private readonly socket;
    /**
     * The socket details for Discord (remote).
     */
    private readonly remote;
    /**
     * A list of keep alives that are waiting to be acknowledged.
     */
    private readonly keepAlives;
    /**
     * The counter used in the keep alive mechanism
     */
    private keepAliveCounter;
    /**
     * The buffer used to write the keep alive counter into
     */
    private readonly keepAliveBuffer;
    /**
     * The Node.js interval for the keep-alive mechanism
     */
    private readonly keepAliveInterval;
    /**
     * The time taken to receive a response to keep alive messages
     */
    ping?: number;
    /**
     * The debug logger function, if debugging is enabled.
     */
    private readonly debug;
    /**
     * Creates a new VoiceUDPSocket.
     *
     * @param remote - Details of the remote socket
     */
    constructor(remote: SocketConfig, debug?: boolean);
    /**
     * Called when a message is received on the UDP socket
     * @param buffer The received buffer
     */
    private onMessage;
    /**
     * Called at a regular interval to check whether we are still able to send datagrams to Discord
     */
    private keepAlive;
    /**
     * Sends a buffer to Discord.
     *
     * @param buffer - The buffer to send
     */
    send(buffer: Buffer): void;
    /**
     * Closes the socket, the instance will not be able to be reused.
     */
    destroy(): void;
    /**
     * Performs IP discovery to discover the local address and port to be used for the voice connection.
     *
     * @param ssrc - The SSRC received from Discord
     */
    performIPDiscovery(ssrc: number): Promise<SocketConfig>;
}
/**
 * Parses the response from Discord to aid with local IP discovery.
 *
 * @param message - The received message
 */
export declare function parseLocalPacket(message: Buffer): SocketConfig;
//# sourceMappingURL=VoiceUDPSocket.d.ts.map