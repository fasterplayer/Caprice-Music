/// <reference types="node" />
import { VoiceUDPSocket } from './VoiceUDPSocket';
import { VoiceWebSocket } from './VoiceWebSocket';
import { Awaited } from '../util/util';
import { TypedEmitter } from 'tiny-typed-emitter';
export declare const SUPPORTED_ENCRYPTION_MODES: string[];
/**
 * The different statuses that a networking instance can hold. The order
 * of the states between OpeningWs and Ready is chronological (first the
 * instance enters OpeningWs, then it enters Identifying etc.)
 */
export declare enum NetworkingStatusCode {
    OpeningWs = 0,
    Identifying = 1,
    UdpHandshaking = 2,
    SelectingProtocol = 3,
    Ready = 4,
    Resuming = 5,
    Closed = 6
}
/**
 * The initial Networking state. Instances will be in this state when a WebSocket connection to a Discord
 * voice gateway is being opened.
 */
export interface NetworkingOpeningWsState {
    code: NetworkingStatusCode.OpeningWs;
    ws: VoiceWebSocket;
    connectionOptions: ConnectionOptions;
}
/**
 * The state that a Networking instance will be in when it is attempting to authorize itself.
 */
export interface NetworkingIdentifyingState {
    code: NetworkingStatusCode.Identifying;
    ws: VoiceWebSocket;
    connectionOptions: ConnectionOptions;
}
/**
 * The state that a Networking instance will be in when opening a UDP connection to the IP and port provided
 * by Discord, as well as performing IP discovery.
 */
export interface NetworkingUdpHandshakingState {
    code: NetworkingStatusCode.UdpHandshaking;
    ws: VoiceWebSocket;
    udp: VoiceUDPSocket;
    connectionOptions: ConnectionOptions;
    connectionData: Pick<ConnectionData, 'ssrc'>;
}
/**
 * The state that a Networking instance will be in when selecting an encryption protocol for audio packets.
 */
export interface NetworkingSelectingProtocolState {
    code: NetworkingStatusCode.SelectingProtocol;
    ws: VoiceWebSocket;
    udp: VoiceUDPSocket;
    connectionOptions: ConnectionOptions;
    connectionData: Pick<ConnectionData, 'ssrc'>;
}
/**
 * The state that a Networking instance will be in when it has a fully established connection to a Discord
 * voice server.
 */
export interface NetworkingReadyState {
    code: NetworkingStatusCode.Ready;
    ws: VoiceWebSocket;
    udp: VoiceUDPSocket;
    connectionOptions: ConnectionOptions;
    connectionData: ConnectionData;
    preparedPacket?: Buffer;
}
/**
 * The state that a Networking instance will be in when its connection has been dropped unexpectedly, and it
 * is attempting to resume an existing session.
 */
export interface NetworkingResumingState {
    code: NetworkingStatusCode.Resuming;
    ws: VoiceWebSocket;
    udp: VoiceUDPSocket;
    connectionOptions: ConnectionOptions;
    connectionData: ConnectionData;
    preparedPacket?: Buffer;
}
/**
 * The state that a Networking instance will be in when it has been destroyed. It cannot be recovered from this
 * state.
 */
export interface NetworkingClosedState {
    code: NetworkingStatusCode.Closed;
}
/**
 * The various states that a networking instance can be in.
 */
export declare type NetworkingState = NetworkingOpeningWsState | NetworkingIdentifyingState | NetworkingUdpHandshakingState | NetworkingSelectingProtocolState | NetworkingReadyState | NetworkingResumingState | NetworkingClosedState;
/**
 * Details required to connect to the Discord voice gateway. These details
 * are first received on the main bot gateway, in the form of VOICE_SERVER_UPDATE
 * and VOICE_STATE_UPDATE packets.
 */
interface ConnectionOptions {
    serverID: string;
    userID: string;
    sessionID: string;
    token: string;
    endpoint: string;
}
/**
 * Information about the current connection, e.g. which encryption mode is to be used on
 * the connection, timing information for playback of streams.
 */
export interface ConnectionData {
    ssrc: number;
    encryptionMode: string;
    secretKey: Uint8Array;
    sequence: number;
    timestamp: number;
    packetsPlayed: number;
    nonce: number;
    nonceBuffer: Buffer;
    speaking: boolean;
}
export interface NetworkingEvents {
    debug: (message: string) => Awaited<void>;
    error: (error: Error) => Awaited<void>;
    stateChange: (oldState: NetworkingState, newState: NetworkingState) => Awaited<void>;
    close: (code: number) => Awaited<void>;
}
/**
 * Manages the networking required to maintain a voice connection and dispatch audio packets
 */
export declare class Networking extends TypedEmitter<NetworkingEvents> {
    private _state;
    /**
     * The debug logger function, if debugging is enabled.
     */
    private readonly debug;
    /**
     * Creates a new Networking instance.
     */
    constructor(options: ConnectionOptions, debug: boolean);
    /**
     * Destroys the Networking instance, transitioning it into the Closed state.
     */
    destroy(): void;
    /**
     * The current state of the networking instance.
     */
    get state(): NetworkingState;
    /**
     * Sets a new state for the networking instance, performing clean-up operations where necessary.
     */
    set state(newState: NetworkingState);
    /**
     * Creates a new WebSocket to a Discord Voice gateway.
     *
     * @param endpoint - The endpoint to connect to
     * @param debug - Whether to enable debug logging
     */
    private createWebSocket;
    /**
     * Propagates errors from the children VoiceWebSocket and VoiceUDPSocket.
     *
     * @param error - The error that was emitted by a child
     */
    private onChildError;
    /**
     * Called when the WebSocket opens. Depending on the state that the instance is in,
     * it will either identify with a new session, or it will attempt to resume an existing session.
     */
    private onWsOpen;
    /**
     * Called when the WebSocket closes. Based on the reason for closing (given by the code parameter),
     * the instance will either attempt to resume, or enter the closed state and emit a 'close' event
     * with the close code, allowing the user to decide whether or not they would like to reconnect.
     *
     * @param code - The close code
     */
    private onWsClose;
    /**
     * Called when the UDP socket has closed itself if it has stopped receiving replies from Discord
     */
    private onUdpClose;
    /**
     * Called when a packet is received on the connection's WebSocket
     * @param packet - The received packet
     */
    private onWsPacket;
    /**
     * Propagates debug messages from the child WebSocket.
     *
     * @param message - The emitted debug message
     */
    private onWsDebug;
    /**
     * Propagates debug messages from the child UDPSocket.
     *
     * @param message - The emitted debug message
     */
    private onUdpDebug;
    /**
     * Prepares an Opus packet for playback. This includes attaching metadata to it and encrypting it.
     * It will be stored within the instance, and can be played by dispatchAudio().
     *
     * @remarks
     * Calling this method while there is already a prepared audio packet that has not yet been dispatched
     * will overwrite the existing audio packet. This should be avoided.
     *
     * @param opusPacket - The Opus packet to encrypt
     *
     * @returns The audio packet that was prepared.
     */
    prepareAudioPacket(opusPacket: Buffer): Buffer | undefined;
    /**
     * Dispatches the audio packet previously prepared by prepareAudioPacket(opusPacket). The audio packet
     * is consumed and cannot be dispatched again.
     */
    dispatchAudio(): boolean;
    /**
     * Plays an audio packet, updating timing metadata used for playback.
     *
     * @param audioPacket - The audio packet to play
     */
    private playAudioPacket;
    /**
     * Sends a packet to the voice gateway indicating that the client has start/stopped sending
     * audio.
     *
     * @param speaking - Whether or not the client should be shown as speaking
     */
    setSpeaking(speaking: boolean): void;
    /**
     * Creates a new audio packet from an Opus packet. This involves encrypting the packet,
     * then prepending a header that includes metadata.
     *
     * @param opusPacket - The Opus packet to prepare
     * @param connectionData - The current connection data of the instance
     */
    private createAudioPacket;
    /**
     * Encrypts an Opus packet using the format agreed upon by the instance and Discord.
     *
     * @param opusPacket - The Opus packet to encrypt
     * @param connectionData - The current connection data of the instance
     */
    private encryptOpusPacket;
}
export {};
//# sourceMappingURL=Networking.d.ts.map