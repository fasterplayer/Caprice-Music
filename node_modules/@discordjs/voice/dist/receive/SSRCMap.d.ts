import { TypedEmitter } from 'tiny-typed-emitter';
import { Awaited } from '../util/util';
/**
 * The known data for a user in a Discord voice connection
 */
export interface VoiceUserData {
    /**
     * The SSRC of the user's audio stream
     */
    audioSSRC: number;
    /**
     * The SSRC of the user's video stream (if one exists).
     * Cannot be 0. If undefined, the user has no video stream.
     */
    videoSSRC?: number;
    /**
     * The Discord user ID of the user
     */
    userId: string;
}
/**
 * The events that an SSRCMap may emit.
 */
export interface SSRCMapEvents {
    update: (oldData: VoiceUserData | undefined, newData: VoiceUserData) => Awaited<void>;
    delete: (deletedData: VoiceUserData) => Awaited<void>;
}
/**
 * Maps audio SSRCs to data of users in voice connections.
 */
export declare class SSRCMap extends TypedEmitter<SSRCMapEvents> {
    /**
     * The underlying map
     */
    private readonly map;
    constructor();
    /**
     * Updates the map with new user data
     *
     * @param data The data to update with
     */
    update(data: VoiceUserData): void;
    /**
     * Gets the stored voice data of a user.
     *
     * @param target The target, either their user ID or audio SSRC
     */
    get(target: number | string): VoiceUserData | undefined;
    /**
     * Deletes the stored voice data about a user.
     *
     * @param target The target of the delete operation, either their audio SSRC or user ID
     * @returns The data that was deleted, if any
     */
    delete(target: number | string): VoiceUserData | undefined;
}
//# sourceMappingURL=SSRCMap.d.ts.map