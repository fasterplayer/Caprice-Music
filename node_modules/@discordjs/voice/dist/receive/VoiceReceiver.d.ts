import type { VoiceConnection } from '../VoiceConnection';
import { AudioReceiveStream } from './AudioReceiveStream';
import { SSRCMap } from './SSRCMap';
/**
 * Attaches to a VoiceConnection, allowing you to receive audio packets from other
 * users that are speaking.
 *
 * @beta
 */
export declare class VoiceReceiver {
    /**
     * The attached connection of this receiver.
     */
    readonly voiceConnection: VoiceConnection;
    /**
     * Maps SSRCs to Discord user IDs.
     */
    readonly ssrcMap: SSRCMap;
    /**
     * The current audio subscriptions of this receiver.
     */
    readonly subscriptions: Map<number, AudioReceiveStream>;
    /**
     * The connection information for this receiver. Used to decrypt incoming packets.
     */
    private connectionData;
    constructor(voiceConnection: VoiceConnection);
    /**
     * Called when a packet is received on the attached connection's WebSocket.
     *
     * @param packet The received packet
     */
    private onWsPacket;
    private decrypt;
    /**
     * Parses an audio packet, decrypting it to yield an Opus packet.
     *
     * @param buffer The buffer to parse
     * @param mode The encryption mode
     * @param nonce The nonce buffer used by the connection for encryption
     * @param secretKey The secret key used by the connection for encryption
     * @returns The parsed Opus packet
     */
    private parsePacket;
    /**
     * Called when the UDP socket of the attached connection receives a message.
     *
     * @param msg The received message
     */
    private onUdpMessage;
    /**
     * Creates a subscription for the given target, specified either by their SSRC or user ID.
     *
     * @param target The audio SSRC or user ID to subscribe to
     * @returns A readable stream of Opus packets received from the target
     */
    subscribe(target: string | number): AudioReceiveStream;
}
/**
 * Creates a new voice receiver for the given voice connection.
 *
 * @param voiceConnection The voice connection to attach to
 * @beta
 * @remarks
 * Voice receive is an undocumented part of the Discord API - voice receive is not guaranteed
 * to be stable and may break without notice.
 */
export declare function createVoiceReceiver(voiceConnection: VoiceConnection): VoiceReceiver;
//# sourceMappingURL=VoiceReceiver.d.ts.map